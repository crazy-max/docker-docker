FROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.12 as base
RUN apk --update --no-cache add \
    ca-certificates \
    curl \
    git \
    jq \
    openssh-client \
  && rm -rf /tmp/* /var/cache/apk/*

FROM --platform=${TARGETPLATFORM:-linux/amd64} base as docker-static
ENV DOCKER_VERSION="20.10.3"
ARG TARGETPLATFORM
RUN DOCKER_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
    "linux/amd64")   echo "x86_64"  ;; \
    "linux/arm/v7")  echo "armhf"   ;; \
    "linux/arm64")   echo "aarch64" ;; \
    *)               echo ""        ;; esac) \
  && echo "DOCKER_ARCH=$DOCKER_ARCH" \
  && mkdir -p /opt/docker \
  && set -x; wget -q "https://download.docker.com/linux/static/stable/${DOCKER_ARCH}/docker-${DOCKER_VERSION}.tgz" -qO "/tmp/docker.tgz" \
  && tar --extract --file /tmp/docker.tgz --strip-components 1 --directory /opt/docker/ \
  && ls -al /opt/docker

FROM --platform=${TARGETPLATFORM:-linux/amd64} base as docker-buildkit
ENV BUILDKIT_VERSION="0.8.1"
ARG TARGETPLATFORM
RUN BUILDKIT_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
    "linux/amd64")   echo "amd64"   ;; \
    "linux/arm/v7")  echo "arm-v7"  ;; \
    "linux/arm64")   echo "arm64"   ;; \
    *)               echo ""        ;; esac) \
  && echo "BUILDKIT_ARCH=$BUILDKIT_ARCH" \
  && mkdir -p /opt/docker-buildkit \
  && set -x; wget -q "https://github.com/moby/buildkit/releases/download/v${BUILDKIT_VERSION}/buildkit-v${BUILDKIT_VERSION}.linux-${BUILDKIT_ARCH}.tar.gz" -qO "/tmp/buildkit.tar.gz" \
  && tar -xzf /tmp/buildkit.tar.gz --strip 1 -C /opt/docker-buildkit \
  && ls -al /opt/docker-buildkit

FROM --platform=${TARGETPLATFORM:-linux/amd64} base as docker-buildx
ENV BUILDX_VERSION="0.5.1"
ARG TARGETPLATFORM
RUN BUILDX_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
    "linux/amd64")   echo "amd64"   ;; \
    "linux/arm/v7")  echo "arm-v7"  ;; \
    "linux/arm64")   echo "arm64"   ;; \
    *)               echo ""        ;; esac) \
  && echo "BUILDX_ARCH=$BUILDX_ARCH" \
  && mkdir -p /opt \
  && set -x; wget -q "https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-${BUILDX_ARCH}" -qO "/opt/docker-buildx" \
  && chmod +x /opt/docker-buildx

FROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.12
LABEL maintainer="CrazyMax"

RUN apk --update --no-cache add \
    bash \
    ca-certificates \
    docker-compose \
    git \
    openssh-client \
  && rm -rf /tmp/* /var/cache/apk/*

COPY --from=docker-static /opt/docker/ /usr/local/bin/
COPY --from=docker-buildkit /opt/docker-buildkit/ /usr/local/bin/
COPY --from=docker-buildx /opt/docker-buildx /usr/libexec/docker/cli-plugins/docker-buildx

# https://github.com/docker-library/docker/pull/166
#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates
#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH
# (For this to work, at least the "client" subdirectory of this path needs to be shared between the client and server containers via a volume, "docker cp", or other means of data sharing.)
ENV DOCKER_TLS_CERTDIR=/certs
ENV DOCKER_CLI_EXPERIMENTAL=enabled

RUN docker --version \
  && buildkitd --version \
  && buildctl --version \
  && docker buildx version \
  && docker-compose --version \
  && mkdir /certs /certs/client \
  && chmod 1777 /certs /certs/client

COPY rootfs/modprobe.sh /usr/local/bin/modprobe
COPY rootfs/docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["sh"]
